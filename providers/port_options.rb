#
# Cookbook:: freebsd
# Provider:: port_option
#
# Copyright:: 2012-2016, ZephirWorks
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use_inline_resources

action :create do
  load_options_file

  if new_resource.source
    res = template new_resource.options_path do
      mode '0644'
      source new_resource.source
      action :nothing
    end
  else
    output = "# This file is auto-generated by Chef.\n"

    if new_resource.port_version
      port_version = new_resource.name + '-' + new_resource.port_version
      output << "# Options for #{port_version}\n"
      output << "_OPTIONS_READ=#{port_version}\n"
      output << "_FILE_COMPLETE_OPTIONS_LIST=#{new_resource.options_define}\n"
    end

    new_resource.options_define.split(' ').each do |option|
      enabled = if new_resource.options.key?(option)
                  new_resource.options[option]
                else
                  # options file does not exist, get default setting
                  new_resource.port_options.include?(option)
                end

      output << if enabled
                  'OPTIONS_FILE_SET+='
                else
                  'OPTIONS_FILE_UNSET+='
                end
      output << option + "\n"
    end

    res = file new_resource.options_path do
      mode '0644'
      content output
      action :nothing
    end
  end
  directory(new_resource.options_dir).run_action(:create)
  res.run_action(:create)
  new_resource.updated_by_last_action(res.updated_by_last_action?)
end

protected

# Loads /var/db/ports/lang_php56/options file
def load_options_file
  new_resource.port_dir = port_dir(new_resource.name)
  category, new_resource.name = new_resource.port_dir.split('/')[3, 4]
  new_resource.options_dir = "/var/db/ports/#{category}_#{new_resource.name}"
  new_resource.options_path = new_resource.options_dir + '/options'

  # Example for `lang/php56`
  #
  # Does not change after `make config`:
  # OPTIONS_DEFAULT=CGI CLI FPM IPV6 LINKTHR
  # OPTIONS_DEFINE=CLI CGI FPM EMBED PHPDBG DEBUG DTRACE IPV6 MAILHEAD LINKTHR ZTS
  #
  # Before `make config`:
  # PORT_OPTIONS=CGI CLI DOCS EXAMPLES FPM IPV6 LINKTHR NLS
  # After `make config`:
  # PORT_OPTIONS=CGI CLI DOCS EXAMPLES FPM LINKTHR MAILHEAD NLS

  port_version = ports_makefile_options_variable_value('PORTVERSION')
  port_revision = ports_makefile_options_variable_value('PORTREVISION')
  new_resource.port_version = port_version
  new_resource.port_version << '_' + port_revision if port_revision.to_i > 0

  new_resource.options_define = ports_makefile_options_variable_value('OPTIONS_DEFINE')
  new_resource.port_options = ports_makefile_options_variable_value('PORT_OPTIONS').split(' ')

  new_resource.options.keys.each do |key|
    new_resource.options[key.to_s.upcase] = new_resource.options.delete(key)
  end

  Chef::Log.debug "Loaded options into new_resource: #{new_resource.inspect}"
end

def ports_makefile_options_variable_value(variable)
  make_v = shell_out!("make -V #{variable}", cwd: new_resource.port_dir, env: nil, returns: [0, 1])
  make_v.stdout.strip
end

# Taken from: https://github.com/chef/chef/blob/686113531d23f30e9973d659c456ae33eb9cff1f/lib/chef/provider/package/freebsd/base.rb#L36
# TODO: this should be included, not copied
def port_dir(port)
  case port

    # When the package name starts with a '/' treat it as the full path to the ports directory.
  when %r{^\/}
    port

    # Otherwise if the package name contains a '/' not at the start (like 'www/wordpress') treat
    # as a relative path from /usr/ports.
  when %r{\/}
    "/usr/ports/#{port}"

    # Otherwise look up the path to the ports directory using 'whereis'
  else
    whereis = shell_out!("whereis -s #{port}", env: nil)
    path = whereis.stdout[/^#{Regexp.escape(port)}:\s+(.+)$/, 1]
    raise Chef::Exceptions::Package, "Could not find port with the name #{port}" unless path
    path
  end
end
